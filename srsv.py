#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Thu Aug 21 16:45:36 2014 from "D:\pythonscript\wxPython\srsv.wxg"
#

import wx
import wx.html

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import os
import sys
import time as t
import StringIO
import gzip
import cookielib
import urllib2
import sqlite3
import ConfigParser
import thread
import webbrowser
import string

reload(sys) # Python2.5 初始化后会删除 sys.setdefaultencoding 这个方法，我们需要重新载入   
sys.setdefaultencoding('utf-8') 

class CharValidator(wx.PyValidator):
    ''' Validates data as it is entered into the text controls. '''

    #----------------------------------------------------------------------
    def __init__(self, flag):
        wx.PyValidator.__init__(self)
        self.flag = flag
        self.Bind(wx.EVT_CHAR, self.OnChar)

    #----------------------------------------------------------------------
    def Clone(self):
        '''Required Validator method'''
        return CharValidator(self.flag)

    #----------------------------------------------------------------------
    def Validate(self, win):
        return True

    #----------------------------------------------------------------------
    def TransferToWindow(self):
        return True

    #----------------------------------------------------------------------
    def TransferFromWindow(self):
        return True

    #----------------------------------------------------------------------
    def OnChar(self, event):
        keycode = int(event.GetKeyCode())
        letters_special_symbol = string.letters + "`-=[]\\;',./"
        letters_special_symbol_excpet_dot = string.letters + "`-=[]\\;',/"
        if keycode < 256:
            #print keycode
            key = chr(keycode)
            #print key
            if self.flag == 'no-alpha' and key in letters_special_symbol:
                return
            if self.flag == 'no-digit' and key in string.digits:
                return
            if self.flag == 'no-alpha-except-dot' and key in letters_special_symbol_excpet_dot:
                return
        event.Skip()

PROXYENABLE = 1
PROXYDISABLE = 0
OVERWRITE = 1
APPEND = 0
DBENABLE = 1
DBDISABLE = 0
ABOUT = """
        <html>
             <body bgcolor="#F0F0F0">
                 <div align="center"><font size='9'><br/><br/><br/><br/><br/><br/><br/><br/>
                                      新浪微博搜索结果统计查看器 v0.5<br/>
                                      自动搜索设置的URL，查看相关的统计数据<br/><br/>
                                      希望这个工具能让我最亲爱的小表妹王晨别太累<br/><br/>
                                      作者：邱英涛<br/>
                   Email：<a href="mailto:qiuyingtao@gmail.com" mce_href="mailto:qiuyingtao@gmail.com">qiuyingtao@gmail.com</a><br/>
                   QQ：217017<br/>
                </font></div>
            </body>
        </html>
        """

def utf82gbk(txt):
    postTxt = ''
    #global postTxt
    try:
        postTxt = txt.decode('utf-8').encode('gbk')
    except UnicodeEncodeError:
        pass
    return postTxt

def unzip(data):
    data = StringIO.StringIO(data)
    gz = gzip.GzipFile(fileobj=data)
    data = gz.read()
    gz.close()
    return data

def print_ok_at_end_of_last_line(log_area):
    line_number = log_area.GetNumberOfLines()
    last_line = log_area.GetLineText(line_number - 2)
    last_line_pos = log_area.GetLastPosition() - 2
    
    if last_line[-3:] == '内容。':
        log_area.Replace(last_line_pos - 1, last_line_pos, ' --OK')
    elif last_line[-3:] == '容。。':
        log_area.Replace(last_line_pos - 2, last_line_pos, ' --OK')
    elif last_line[-3:] == '。。。':
        log_area.Replace(last_line_pos - 3, last_line_pos, ' --OK')

def getWebPages(log_area, statistics_button, http_proxy, url, cookie, start_page, end_page, result_type, result_path):
    cj = cookielib.CookieJar()
    cookie_handler = urllib2.HTTPCookieProcessor(cj)
    
    if len(http_proxy) == 0:
        proxy_handler = urllib2.ProxyHandler({})
    else:
        proxy_handler = urllib2.ProxyHandler({"http" : http_proxy})
    
    opener = urllib2.build_opener(cookie_handler, proxy_handler)
    opener.addheaders = [('Host', 's.weibo.com'), 
                         ('User-Agent', '"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0"'), 
                         ('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'), 
                         ('Accept-Language', 'zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3'), 
                         ('Accept-Encoding', 'gzip, deflate'), 
                         ('DNT', '1'), 
                         ('Cookie', cookie), 
                         ('Connection', 'keep-alive')]
    
    urls = []
    webPageList = []

    if start_page == end_page:
        urls.append(url + '&page=' + str(start_page))
    else:
        for pageNumber in range(start_page, end_page+1):
            urls.append(url + '&page=' + str(pageNumber))

    log_area.AppendText('Enjoy it!')

    for url in urls:
        log_area.AppendText('\n')
        print_ok_at_end_of_last_line(log_area)
        log_area.AppendText('\n正在获取 ' + url + ' 的内容')
        try:
            response = opener.open(url, timeout = 120)
            htmldata = unzip(response.read())
            #print htmldata
            if htmldata.find('\xd0\xc2\xc0\xcb\xcd\xa8\xd0\xd0\xd6\xa4') != -1:
                log_area.AppendText('cookie可能过期了，请把新的cookie写到配置文件里再运行这个工具试试\n\n')
                return
            webPageList.append(htmldata)
            t.sleep(5)
        except StandardError:
            log_area.AppendText('网络出现错误，如果使用了代理请看代理是否配置正确，同时请确认url和cookie是否填写正确，然后请重新运行程序。若确认网络通畅仍持续出现这个问题，请联系作者\n\n')
            return

    analyzeWebPages(webPageList, log_area, statistics_button, DBENABLE, result_type, result_path)

def analyzeWebPages(webPageList, log_area, statistics_button, db_enable, result_type, result_path):
    cx = sqlite3.connect('srsv.db')
    cu = cx.cursor()
    commit = True
    lineList = []

    log_area.AppendText('\n')
    for webPage in webPageList:
        weibo = ''
        dlList = []

        scriptStart = webPage.find('STK && STK.pageletM && STK.pageletM.view({"pid":"pl_wb_feedlist","js"')
        if scriptStart != -1:
            weibo = webPage[scriptStart:]
            scriptEnd = weibo.find('</script>')
            weibo = weibo[:scriptEnd]

        scriptStart = webPage.find('STK && STK.pageletM && STK.pageletM.view({"pid":"pl_weibo_direct","js"')
        if scriptStart != -1:
            weibo = webPage[scriptStart:]
            scriptEnd = weibo.find('</script>')
            weibo = weibo[:scriptEnd]

        while True:
            start = weibo.find('<dl class=\\"feed_list W_linecolor')
            if start == -1:
                break
            wbTemp = weibo[start+3:]
            dlStart = wbTemp.find('<dl')
            dlEnd = wbTemp.find('dl>')
            if dlStart < dlEnd:
                wbTemp = wbTemp[dlEnd+3:]
                end = start + 3 + dlEnd + 3 + wbTemp.find('dl>')
            else:
                end = start + 3 + dlEnd
            dl = weibo[start:end+3]
            dlList.append(dl)
            weibo = weibo[end+3:]

        print_ok_at_end_of_last_line(log_area)
        for item in dlList:
            #print item
            title = '无'
            trans = item.find('transparent.gif')
            if trans != -1:
                titleTemp = item[trans:]
                titleStart = titleTemp.find('title')
                titleEnd = titleTemp.find('alt')
                title = titleTemp[titleStart+9:titleEnd-3]
            if title == '\\u5fae\\u535a\\u673a\\u6784\\u8ba4\\u8bc1':
                title = '蓝V'
            elif title.find('\\u5fae\\u535a\\u4e2a\\u4eba\\u8ba4\\u8bc1') != -1:
                title = '黄V'
            elif title == '\\u5fae\\u535a\\u8fbe\\u4eba':
                title = '达人'
            comm = item.find('<dl class=\\"comment W_textc W_linecolor W_bgcolor')
            if comm != -1 and comm < trans:
                title = '无'
            #if title == 'n/a':
            #    continue
    
            nicknameStart = item.find('<a nick-name=')
            nicknameEnd = nicknameStart + item[nicknameStart:].find('href=')
            nickname = item[nicknameStart+15:nicknameEnd-3].decode('unicode_escape')

            contentStart = item.find('<em>')
            item = item[contentStart+4:]
            contentEnd = item.find('<\\/em>')
            content = item[:contentEnd+6]
            content = content.replace('\\"', '"').replace("\\/", "/")
            contentTemp = ''
            while True:
                ltIndex = content.find('<')
                #if ltIndex == -1 and len(content) == 0:
                #    break
                contentTemp = contentTemp + content[:ltIndex]
                #发现实际情况中新浪微博自身有bug，出现<xxx .....<yyy ...的情况，所以碰见这种情况直接跳出循环
                #而且这样也能顺便把最后的</em>的情况处理掉，因为到最后ltIndex_temp为-1
                ltIndex_temp = content[ltIndex+1:].find('<')
                gtIndex_temp = content[ltIndex+1:].find('>')
                if ltIndex_temp < gtIndex_temp:
                    break
                gtIndex = content.find('>') 
                content = content[gtIndex+1:]
            content = contentTemp.decode('unicode_escape')
        
            praised = '0'
            emStart = item.find('<em class=\\"W_ico20 icon_praised_b\\">')
            emTemp = item[emStart:]
            praisedEnd = emTemp.find(')')
            ahrefIndex = emTemp.find('<\\/a>')
            if praisedEnd < ahrefIndex:
                praisedStart = emTemp.find('(')
                praised = emTemp[praisedStart+1:praisedEnd]
        
            forward = '0'
            actionStart = item.find('action-type=\\"feed_list_forward')
            actionTemp = item[actionStart:]
            forwardEnd = actionTemp.find(')')
            ahrefIndex = actionTemp.find('<\\/a>')
            if forwardEnd < ahrefIndex:
                forwardStart = actionTemp.find('(')
                forward = actionTemp[forwardStart+1:forwardEnd]
        
            favorite = '0'
            actionStart = item.find('action-type=\\"feed_list_favorite')
            actionTemp = item[actionStart:]
            favoriteEnd = actionTemp.find(')')
            ahrefIndex = actionTemp.find('<\\/a>')
            if favoriteEnd < ahrefIndex:
                favoriteStart = actionTemp.find('(')
                favorite = actionTemp[favoriteStart+1:favoriteEnd]
        
            comment = '0'
            actionStart = item.find('action-type=\\"feed_list_comment')
            actionTemp = item[actionStart:]
            commentEnd = actionTemp.find(')')
            if commentEnd != -1:
                ahrefIndex = actionTemp.find('<\\/a>')
                if commentEnd < ahrefIndex:
                    commentStart = actionTemp.find('(')
                    comment = actionTemp[commentStart+1:commentEnd]
        
            dateIndex = actionTemp.find('date=')
            datetime = actionTemp[dateIndex+7:dateIndex+17]
            datespacetime = t.strftime('%Y-%m-%d %X', t.localtime(int(datetime)))
            dateAndTime = datespacetime.split(' ')
            date = dateAndTime[0]
            time = dateAndTime[1]

            linkStart = actionTemp.find('<a href')
            linkEnd = actionTemp.find('title')
            link = actionTemp[linkStart+10:linkEnd-3]
            link = link.replace('\\/', '/')
        
            #print '昵称：%s\t头衔：%s\t赞：%s\t转发：%s\t收藏：%s\t评论：%s\t日期：%s\t时间：%s' % (nickname, title, praised, forward, favorite, comment, date, time)
            line =  '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n' % (nickname, title, praised, forward, favorite, comment, date, time, link, content)
            lineList.append(utf82gbk(line))

            log_area.AppendText('\n' + line)

            if (db_enable == 1):
                sqlStr = 'INSERT INTO weibo (nickname, title, praised, forward, favorite, comment, date, time, link, content, datetime) \
                          VALUES ("%s", "%s", %s, %s, %s, %s, "%s", "%s", "%s", "%s", %s)' \
                          % (nickname, title, int(praised), int(forward), int(favorite), int(comment), date, time, link, content, int(datetime))
                cu.execute(sqlStr)

    try:
        if result_type == OVERWRITE:
            r = open(result_path, 'w')
            r.write(utf82gbk('昵称,头衔,赞,转发,收藏,评论,日期,时间,链接,内容\n'))
        if result_type == APPEND:
            if os.path.isfile(result_path):
                r = open(result_path, 'a')
            else:
                r = open(result_path, 'w')
                r.write(utf82gbk('昵称,头衔,赞,转发,收藏,评论,日期,时间,链接,内容\n'))
        r.writelines(lineList)
        r.close()
        log_area.AppendText('\n统计结果文件生成完毕！请查看 ' + result_path + '\n\n\n')
    except IOError:
        log_area.AppendText('\n文件生成失败！文件可能正在被别的编辑器比如Excel之类的使用，请关闭相关编辑器后再试。\n\n\n')
        commit = False

    if commit:
        cx.commit()

    cx.close()
    statistics_button.Enable(True)

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.frame_1_statusbar = self.CreateStatusBar(1, 0)
        self.notebook_5 = wx.Notebook(self, wx.ID_ANY, style=0)
        self.notebook_5_pane_1 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.window_1 = wx.SplitterWindow(self.notebook_5_pane_1, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
        self.label_2 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"url\uff1a"))
        self.label_9 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, "")
        self.text_ctrl_2 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "")
        self.label_3 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"cookie\uff1a"))
        self.label_10 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, "")
        self.text_ctrl_3 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.label_1 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"\u8d77\u59cb\u9875"))
        self.text_ctrl_4 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "")
        self.label_4 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"\u7ed3\u675f\u9875"))
        self.text_ctrl_5 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "")
        self.sizer_21_staticbox = wx.StaticBox(self.window_1_pane_1, wx.ID_ANY, _(u"\u641c\u7d22"))
        self.checkbox_1 = wx.CheckBox(self.window_1_pane_1, wx.ID_ANY, "")
        self.label_5 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"\u5730\u5740\uff1a  "))
        self.text_ctrl_6 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "")
        self.label_8 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"\u7aef\u53e3\uff1a  "))
        self.text_ctrl_9 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "")
        self.sizer_6_staticbox = wx.StaticBox(self.window_1_pane_1, wx.ID_ANY, _(u"\u4ee3\u7406"))
        self.radio_box_1 = wx.RadioBox(self.window_1_pane_1, wx.ID_ANY, "", choices=[_(u"\u6dfb\u52a0"), _(u"\u8986\u76d6")], majorDimension=0, style=wx.RA_SPECIFY_COLS)
        self.label_7 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _(u"\u5b58\u653e\u4f4d\u7f6e\uff1a"))
        self.text_ctrl_8 = wx.TextCtrl(self.window_1_pane_1, wx.ID_ANY, "")
        self.sizer_7_staticbox = wx.StaticBox(self.window_1_pane_1, wx.ID_ANY, _(u"\u7ed3\u679c"))
        self.button_1 = wx.Button(self.window_1_pane_1, wx.ID_ANY, _(u"\u7edf\u8ba1"))
        self.label_11 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, _("label_ll"))
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)
        self.text_ctrl_1 = wx.TextCtrl(self.window_1_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_5_pane_2 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.notebook_5_pane_3 = wx.Panel(self.notebook_5, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.url_tc_check_handler, self.text_ctrl_2)
        self.Bind(wx.EVT_TEXT, self.cookie_tc_check_handler, self.text_ctrl_3)
        self.Bind(wx.EVT_CHECKBOX, self.proxy_checkbox_handler, self.checkbox_1)
        self.Bind(wx.EVT_BUTTON, self.statistics_button_handler, self.button_1)
        # end wxGlade

        self.text_ctrl_2.Bind(wx.EVT_KILL_FOCUS, self.url_check_handler)
        self.text_ctrl_3.Bind(wx.EVT_KILL_FOCUS, self.cookie_check_handler)
        self.text_ctrl_4.Bind(wx.EVT_KILL_FOCUS, self.start_page_check_handler)
        self.text_ctrl_5.Bind(wx.EVT_KILL_FOCUS, self.end_page_check_handler)
        self.text_ctrl_9.Bind(wx.EVT_KILL_FOCUS, self.port_check_handler)

        self.html.Bind(wx.html.EVT_HTML_LINK_CLICKED, self.click_link_handler) 

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.time_elapse_handler, self.timer)

    def __set_properties(self):
        cf = ConfigParser.ConfigParser()
        cf.read('config.ini')
        http_url = cf.get('http', 'url')
        cookie = cf.get('http', 'cookie')
        start_page = cf.get('http', 'startpage')
        end_page = cf.get('http', 'endpage')
        proxy_enable = cf.getint('proxy', 'enable')
        if proxy_enable == PROXYENABLE:
            proxy_true_or_false = True
            self.text_ctrl_6.Enable(True)
            self.text_ctrl_9.Enable(True)
        else:
            proxy_true_or_false = False
            self.text_ctrl_6.Enable(False)
            self.text_ctrl_9.Enable(False)
        proxy_host = cf.get('proxy', 'host')
        proxy_port = cf.get('proxy', 'port')
        result_type = cf.getint('result', 'type')
        result_path = cf.get('result', 'path')
        
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("WeiboSRSViewer"))
        self.frame_1_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_1_statusbar_fields = [_("frame_1_statusbar")]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.label_2.SetMinSize((30, 14))
        self.label_9.SetForegroundColour(wx.Colour(255, 0, 0))
        self.text_ctrl_2.SetMinSize((600, -1))
        self.text_ctrl_2.SetValue(http_url)
        self.label_3.SetMinSize((55, 14))
        self.label_10.SetForegroundColour(wx.Colour(255, 0, 0))
        self.text_ctrl_3.SetMinSize((600, 160))
        self.text_ctrl_3.SetValue(cookie)
        self.label_1.SetMinSize((50, 20))
        self.text_ctrl_4.SetMinSize((30, -1))
        self.text_ctrl_4.SetValidator(CharValidator('no-alpha'))
        self.text_ctrl_4.SetValue(start_page)
        self.label_4.SetMinSize((50, 20))
        self.text_ctrl_5.SetMinSize((30, -1))
        self.text_ctrl_5.SetValidator(CharValidator('no-alpha'))
        self.text_ctrl_5.SetValue(end_page)
        self.checkbox_1.SetValue(proxy_true_or_false)
        self.text_ctrl_6.SetMinSize((150, 20))
        self.text_ctrl_6.SetValidator(CharValidator('no-alpha-except-dot'))
        self.text_ctrl_6.SetValue(proxy_host)
        self.text_ctrl_9.SetMinSize((50, 20))
        self.text_ctrl_9.SetValidator(CharValidator('no-alpha'))
        self.text_ctrl_9.SetValue(proxy_port)
        self.radio_box_1.SetSelection(0)
        self.text_ctrl_8.SetMinSize((550, -1))
        self.text_ctrl_8.SetValue(result_path)
        self.text_ctrl_1.SetMinSize((1275, 295))
        self.notebook_5_pane_3.SetBackgroundColour(wx.Colour(240, 240, 240))
        # end wxGlade

        self.radio_box_1.SetSelection(result_type)

        self.html = wx.html.HtmlWindow(self.notebook_5_pane_3)
        self.html.SetPage(ABOUT)

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3 = wx.FlexGridSizer(3, 1, 0, 0)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_7_staticbox.Lower()
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_6_staticbox.Lower()
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_21_staticbox.Lower()
        sizer_21 = wx.StaticBoxSizer(self.sizer_21_staticbox, wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(5, 1, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(1, 6, 0, 5)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.label_2, 0, wx.ALL, 10)
        sizer_4.Add(self.label_9, 0, wx.ALL, 10)
        grid_sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_2, 0, wx.LEFT, 10)
        sizer_5.Add(self.label_3, 0, wx.ALL, 10)
        sizer_5.Add(self.label_10, 0, wx.ALL, 10)
        grid_sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_3, 0, wx.LEFT, 10)
        grid_sizer_2.Add(self.label_1, 0, wx.LEFT | wx.TOP, 15)
        grid_sizer_2.Add(self.text_ctrl_4, 0, wx.TOP, 10)
        grid_sizer_2.Add((20, 20), 0, 0, 0)
        grid_sizer_2.Add(self.label_4, 0, wx.LEFT | wx.TOP, 15)
        grid_sizer_2.Add(self.text_ctrl_5, 0, wx.TOP, 10)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_21.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_20.Add(sizer_21, 1, wx.TOP | wx.EXPAND, 5)
        sizer_8.Add(self.checkbox_1, 0, wx.LEFT | wx.TOP, 25)
        sizer_9.Add(self.label_5, 0, wx.LEFT | wx.TOP | wx.BOTTOM, 15)
        sizer_9.Add(self.text_ctrl_6, 0, wx.RIGHT | wx.TOP, 15)
        sizer_9.Add(self.label_8, 0, wx.LEFT | wx.TOP | wx.BOTTOM, 15)
        sizer_9.Add(self.text_ctrl_9, 0, wx.TOP | wx.BOTTOM, 15)
        sizer_8.Add(sizer_9, 1, wx.LEFT | wx.TOP, 10)
        sizer_6.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_11.Add(self.radio_box_1, 0, wx.LEFT, 20)
        sizer_12.Add(self.label_7, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_12.Add(self.text_ctrl_8, 0, wx.ALL, 10)
        sizer_11.Add(sizer_12, 1, wx.LEFT | wx.EXPAND, 15)
        sizer_7.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(sizer_3, 1, wx.TOP | wx.EXPAND, 5)
        sizer_2.Add(self.button_1, 0, wx.ALL, 20)
        sizer_2.Add(self.label_11, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 20)
        grid_sizer_3.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_20.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_20)
        sizer_19.Add(self.text_ctrl_1, 0, wx.LEFT | wx.EXPAND, 1)
        self.window_1_pane_2.SetSizer(sizer_19)
        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2, 333)
        sizer_18.Add(self.window_1, 1, wx.EXPAND, 0)
        self.notebook_5_pane_1.SetSizer(sizer_18)
        self.notebook_5_pane_3.SetSizer(sizer_10)
        self.notebook_5.AddPage(self.notebook_5_pane_1, _(u"\u7edf\u8ba1"))
        self.notebook_5.AddPage(self.notebook_5_pane_2, _(u"\u67e5\u770b"))
        self.notebook_5.AddPage(self.notebook_5_pane_3, _(u"\u5173\u4e8e"))
        sizer_1.Add(self.notebook_5, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

        sizer_10.Add(self.html, 1, wx.EXPAND | wx.ALL, 5)

    def url_check_handler(self, event):
        value = self.text_ctrl_2.GetValue().strip('\n').strip()
        if value.find('/wb/') != -1 and value.find('&Refer') == -1:
            self.label_9.SetLabel('搜索链接地址有误！高级搜索时链接地址应该包含Refer，如有疑问请联系作者。')
        elif value.find('/weibo/') != -1 and value.find('?') == -1:
            self.label_9.SetLabel('搜索链接地址有误！普通搜索时链接地址应该包含?，如有疑问请联系作者。')
        elif (value.find('/wb/') != -1 and value.find('&Refer') != -1) or (value.find('/weibo/') != -1 and value.find('?') != -1):
            self.label_9.SetLabel('')
        elif len(value):
            self.label_9.SetLabel('搜索链接地址不能为空。')
        else:
            self.label_9.SetLabel('呃。。。这种搜索链接地址是怎么来的？目前还不支持，请联系作者。')

    def url_tc_check_handler(self, event):  # wxGlade: MyFrame.<event_handler>
        value = self.text_ctrl_2.GetValue().strip('\n').strip()
        if len(value) != 0:
            self.label_9.SetLabel('')
        
    def cookie_check_handler(self, event):
        value = self.text_ctrl_3.GetValue().strip('\n').strip()
        if len(value) == 0:
            self.label_10.SetLabel('cookie不能为空。')

    def cookie_tc_check_handler(self, event):  # wxGlade: MyFrame.<event_handler>
        value = self.text_ctrl_3.GetValue().strip('\n').strip()
        if len(value) != 0:
            self.label_10.SetLabel('')

    def start_page_check_handler(self, event):
        return

    def end_page_check_handler(self, event):
        return

    def port_check_handler(self, event):
        return

    def click_link_handler(self, link_info):
        webbrowser.open_new_tab(link_info.GetLinkInfo().GetHref())

    def time_elapse_handler(self, event):
        line_number = self.text_ctrl_1.GetNumberOfLines()
        current_line = self.text_ctrl_1.GetLineText(line_number - 1)
        last_pos = self.text_ctrl_1.GetLastPosition()

        if current_line[-3:] == '。。。':
            self.text_ctrl_1.Replace(last_pos - 3, last_pos, '')
        elif current_line[-3:] == '的内容' or current_line[-3:] == '内容。' or current_line[-3:] == '容。。':
            self.text_ctrl_1.AppendText('。')

    def proxy_checkbox_handler(self, event):  # wxGlade: MyFrame.<event_handler>
        if self.checkbox_1.IsChecked():
            self.text_ctrl_6.Enable(True)
            self.text_ctrl_9.Enable(True)
        else:
            self.text_ctrl_6.Enable(False)
            self.text_ctrl_9.Enable(False)

    def statistics_button_handler(self, event):  # wxGlade: MyFrame.<event_handler>
        self.timer.Start(1000)
        self.button_1.Enable(False)
        cf = ConfigParser.ConfigParser()
        cf.read('config.ini')
        baseUrl = self.text_ctrl_2.GetValue()
        cf.set('http', 'url', baseUrl)
        cookie = self.text_ctrl_3.GetValue()
        cf.set('http', 'cookie', cookie)
        start_page = (int)(self.text_ctrl_4.GetValue())
        cf.set('http', 'startpage', start_page)
        end_page = (int)(self.text_ctrl_5.GetValue())
        cf.set('http', 'endpage', end_page)
        if self.checkbox_1.IsChecked():
            proxy_host = self.text_ctrl_6.GetValue()
            proxy_port = self.text_ctrl_9.GetValue()
            http_proxy = 'http://' + proxy_host + ':' + proxy_port
            cf.set('proxy', 'enable', '1')
            cf.set('proxy', 'host', proxy_host)
            cf.set('proxy', 'port', proxy_port)
        else:
            http_proxy = ''
            cf.set('proxy', 'enable', '0')
        result_type = self.radio_box_1.GetSelection()
        cf.set('result', 'type', result_type)
        result_path = self.text_ctrl_8.GetValue()
        cf.set('result', 'path', result_path)
        cf.write(open('config.ini', 'w')) 
        #db_enable = cf.getint('db', 'enable')

        thread.start_new_thread(getWebPages, (self.text_ctrl_1, self.button_1, http_proxy, baseUrl, cookie, start_page, end_page, result_type, result_path))
# end of class MyFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Maximize(True)
    frame_1.Show()
    app.MainLoop()